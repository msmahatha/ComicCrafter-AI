ComicCrafter AI: Project Report
1. Problem Statement
Comics are a powerful storytelling medium, blending visuals with narratives to create engaging content. However, creating high-quality comics requires significant artistic and writing expertise, making it inaccessible to many. The rise of AI-powered content generation provides an opportunity to automate and simplify this process. ComicCrafter AI aims to bridge this gap by leveraging advanced AI models to generate comic-style stories and illustrations from simple text prompts. This tool democratizes comic creation, enabling users of all skill levels to generate visually appealing comics effortlessly.
2. Methodology
2.1. Text Generation (Story Creation)
To generate coherent and engaging comic-style stories, ComicCrafter AI uses:
LLM (Large Language Model): EleutherAI GPT-Neo-125M
Technique: The model generates structured comic narratives by following a predefined format:
Introduction: Setting up the premise and characters.
Storyline: Developing the plot.
Climax: Building tension and excitement.
Moral: Concluding with a lesson or takeaway.
2.2. Image Generation (Illustration Creation)
For generating comic book-style images, the system utilizes:
Primary Model: stabilityai/sdxl-turbo (Optimized Stable Diffusion model for faster generation)
Alternative Model: CompVis/stable-diffusion-v1-4 (Fallback for robustness)
Optimization Techniques:
Use of torch.compile() for performance improvements.
Reduced inference steps and lower resolution for efficiency.
GPU acceleration where available (Apple MPS for macOS, CUDA for NVIDIA GPUs).
2.3. Frontend & User Interface
The application is built using Streamlit, providing an intuitive and interactive UI with the following features:
Text Input: Users provide a story prompt.
Story Output: AI generates a well-structured story.
Image Output: AI generates illustrations for each part of the story.
Enhanced UI: Custom styling for a comic-book feel.
3. Challenges & Solutions
3.1. Model Loading Issues
Problem: Stable Diffusion models require significant computational resources and sometimes fail to load due to hardware limitations or missing dependencies.
Solution:
Implemented a fallback model (CompVis/stable-diffusion-v1-4) if the primary model fails.
Added error handling and user feedback when models fail to load.
Optimized model loading using torch_dtype=torch.float32 for compatibility.
3.2. Performance Optimization
Problem: High computational demand for image generation, leading to slow inference times.
Solution:
Leveraged optimized SDXL-Turbo for faster image generation.
Used reduced inference steps to speed up rendering.
Implemented torch.compile() to enhance efficiency.
3.3. UI Enhancements
Problem: The initial UI lacked a comic-book aesthetic, reducing user engagement.
Solution:
Applied custom CSS styles for a comic-like theme.
Enhanced button styling, text areas, and backgrounds for a more immersive experience.
4. Conclusion
ComicCrafter AI successfully integrates LLMs for story generation and Stable Diffusion for image creation, making AI-assisted comic generation accessible to a wider audience. The project demonstrates how AI can streamline creative workflows and enable users with minimal artistic skills to create compelling comics.
Future improvements include fine-tuning models for better storytelling, adding support for panel-based comic layouts, and improving UI/UX for a more immersive experience.

GitHub Repository: https://github.com/msmahatha/ComicCrafter-AI
   